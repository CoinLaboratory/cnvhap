package cnvtrans;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;


public class CalcCNVRegions {
  
	
	public static void main(String[]args){
		try{
	    File cnvFile = new File("cnv.txt");
		File snpsFile = new File("snps.txt");
		File genoOut = new File("genos.txt");
		
		//the following is a map from chrom to a set of all start end positions 
	 	SortedMap<String,SortedSet<Integer>> start_end= new TreeMap<String, SortedSet<Integer>>();
	
		SortedSet<Integer> cnv_types = new TreeSet<Integer>();
		SortedMap<String, IndivCNV> m  = new TreeMap<String, IndivCNV>();
		BufferedReader br = new BufferedReader(new FileReader(cnvFile));
		String st = "";
		String[] header = br.readLine().split("\\t");
		makeDataStructure(br,m,  cnv_types, start_end);
		List<String> samples = new ArrayList<String>(m.keySet());
		SortedSet<Integer> snpsset = readSNPS(snpsFile);
		int max_cnv = cnv_types.last();
		
		PrintWriter pw = 	new PrintWriter(new BufferedWriter(new FileWriter(genoOut)));
		pw.print("chr\tstart\tend\tregionId\tnosnps\tcounts\t");
		for(int i=0; i<samples.size(); i++){
			pw.print(samples.get(i));
			if(i<samples.size()-1) pw.print("\t");
			else pw.print("\n");		
		}
		Iterator<String> it_chrom = start_end.keySet().iterator();
		while(it_chrom.hasNext()){
			String chr = it_chrom.next();
			Iterator<Integer> it = start_end.get(chr).iterator();
		Integer[] startend = new Integer[] {  (it.next()),0};
		String prev = "";
		Integer[] cnv_counts = new Integer[max_cnv+1];
		String formatString = getFormatString(cnv_counts.length,"%5d");
		for(int k=0; it.hasNext(); k++){
				int position = it.next();
				
				startend[1] =( (position));
				int nosnps = snpsset.tailSet(startend[0]).headSet(position+1).size();
				
				double mid = ((double)startend[0]+(double)startend[1])/2.0;
				String rsid =String.format("R %8.6gmb", mid/(1000*1000)).replaceAll(" ", "");
			     if(rsid.equals(prev)) rsid =String.format("R %10.8gmb", mid/(1000*1000)).replaceAll(" ", "");
			     prev = rsid;
				
				pw.print(chr+"\t"+startend[0]+"\t"+startend[1]+"\t"+rsid+"\t"+nosnps+"\t");
				
			
			//   System.err.println(mid);
				startend[0] = startend[1];
			
				Iterator<String> it1= samples.iterator();
				int counter=0;
				StringBuffer sb = new StringBuffer();
				Arrays.fill(cnv_counts,0);
				for(counter=0;it1.hasNext();counter++){
					String indiv = it1.next();
					IndivCNV cnvs = m.get(indiv);
					if(cnvs==null){
						sb.append(".");
						cnv_counts[2]++;
					}else{
						int noc = cnvs.nocopies(position-1,2);
						cnv_counts[noc]++;
						sb.append(noc==2 ? ".": noc);
					}
					if(it1.hasNext()) sb.append("\t");
					else sb.append("\n");
				}
				pw.print(String.format(formatString, cnv_counts).replaceAll("\\s+", "")+"\t");
				pw.print(sb.toString());
				if(counter<samples.size()){
					throw new RuntimeException("!!");
				}
			}
		}
			pw.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
    }

	private static String getFormatString(int length, String string) {
		StringBuffer sb = new StringBuffer(string);
		for(int i=1; i<length; i++){
			sb.append(":"+string);
		}
		return sb.toString();
	}

	private static void makeDataStructure(BufferedReader iter, Map<String, IndivCNV> m, SortedSet<Integer> cnv_types,
			SortedMap<String, SortedSet<Integer>> start_end) throws Exception {
		String st ="";
		while((st=iter.readLine())!=null){
			String [] str = st.split("\\s+");
			String indiv = str[0];
			IndivCNV cnvs = m.get(indiv);
			if(cnvs == null){
				cnvs = new IndivCNV(indiv,0);
				m.put(indiv, cnvs);
			}
			CNV cnv = new CNV(str,  new int[] {7,6,5,4,2,1},true);	
			cnv_types.add(cnv.type);
			cnvs.add(cnv);
			SortedSet<Integer> st_end = start_end.get(cnv.chrom);
			if(st_end==null) start_end.put(cnv.chrom, st_end = new TreeSet<Integer>());
			st_end.add(cnv.start);
			st_end.add(cnv.end);
		}	
		
	}

	
	
	
	private static SortedSet<Integer> readSNPS(File snpFile) throws Exception {
		SortedSet<Integer> l = new TreeSet<Integer>();
			BufferedReader br = new BufferedReader(new FileReader(snpFile));
			String st = "";
			while((st = br.readLine())!=null){
				l.add(Integer.parseInt(st.split("\\s+")[1]));
			}
			br.close();
		return l;
	}

	
}
